@page "/alunos"
@rendermode InteractiveServer
@using ClosedXML.Excel

@* https://www.youtube.com/watch?v=fwKfPCuiTWQ - Vídeo com informaçòes*@
@* https://www.fluentui-blazor.net/UpgradeGuide *@
@* https://blazorfluentui.azurewebsites.net/FluentSystemIconsPage *@

@if (alunos == null)
{
    <div class="container">
    <FluentProgressRing class="spinner" />
</div>
}
else
{
    <FluentStack HorizontalAlignment="HorizontalAlignment.End">

    <FluentButton OnClick="HandleExportPdf"
        IconStart="@(new Icons.Regular.Size24.DocumentPdf().WithColor(Color.Warning))">
        PDF
    </FluentButton>

    <FluentButton OnClick="HandleExportExcel"
        IconStart="@(new Icons.Regular.Size24.ArrowDown().WithColor(Color.Warning))">
        Excel
    </FluentButton>

    <FluentAnchor Id="btnNovoAluno" Href="/aluno-form"
        IconStart="@(new Icons.Regular.Size24.PersonAdd().WithColor(Color.Success))">
        Novo Aluno
    </FluentAnchor>
</FluentStack>

    <div class="grid">
        <FluentDataGrid Id="alunogrid" Items=@FilteredItems TGridItem=Aluno Pagination="@pagination">
            <TemplateColumn Title="Avatar" Align="Align.Start">
                @if (@context.Foto is not null)
                {
                    <FluentPersona ImageSize="50px" Image="@context.Foto" />
                }
                else
                {
                    <FluentPersona ImageSize="50px" Initials="@context!.Nome[0]!.ToString().ToUpper()" />
                }
            </TemplateColumn>
            <PropertyColumn Title="Nome" Property="@(c => c!.Nome)" Sortable="true" Align=Align.Start>
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleNameFilter"
                            @bind-Value:after="HandleClear" Placeholder="Nome do aluno..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Email" Property="@(c => c!.Email)" Sortable="true" Align=Align.Start />
            <PropertyColumn Title="Idade" Property="@(c => c!.Idade)" Sortable="true" Align=Align.Center />
            <PropertyColumn Title="Turma" Property="@(c => c!.Turma.Identificacao)" Sortable="true" Align=Align.Center />
            <TemplateColumn Align="@Align.End">

                <FluentAnchor IconStart="@(new Icons.Regular.Size24.Edit().WithColor(Color.Success))"
                    Appearance="Appearance.Outline" Href="@($"/aluno-form/{context.Id}")">Edit</FluentAnchor>

                <FluentButton Appearance="Appearance.Outline" OnClick="()=>ConfirmarExclusao(context.Id)"
                    IconStart="@(new Icons.Regular.Size24.Delete().WithColor(Color.Error))">Delete</FluentButton>

            </TemplateColumn>
        </FluentDataGrid>
    </div>
    <br />
    <FluentPaginator State="@pagination" />
}

@code {
    private IQueryable<Aluno>? alunos;
    string nameFilter = string.Empty;

    IQueryable<Aluno>? FilteredItems => alunos?.Where(x => x.Nome.Contains(nameFilter,
    StringComparison.CurrentCultureIgnoreCase));
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };
    ConvertListTo convertListTo = new();
    string[] columnHeaders = { "Nome", "Email", "Idade", "Turma" };
    protected override async Task OnInitializedAsync()
    {
        @* await Task.Delay(1000); *@
        await CarregaAlunos();
        @* pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged(); *@
        await base.OnInitializedAsync();
    }

    private async Task CarregaAlunos()
    {
        //Para preencher o Grid os dados precisam ser do tipo AsQueriable e foi definido no AlunosService
        alunos = await _alunoService.GetAlunos();
    }

    private async Task ConfirmarExclusao(int id)
    {
        var dialog = await DialogService
        .ShowConfirmationAsync($"Confirma exclusão do aluno de id={id} ?",
        "Sim", "Não", "Deletar Aluno");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(id);
        }
        else
        {
            ToastService.ShowInfo($"Operação cancelada");
        }
    }

    private async Task Delete(int id)
    {
        var aluno = await _alunoService.GetAluno(id);

        if (aluno is null)
        {
            ToastService.ShowError($"Aluno com id={id} não encontrado");
            return;
        }

        var result = await _alunoService.DeleteAluno(aluno.Id);

        if (result is not null)
        {
            ToastService.ShowSuccess("Aluno excluído com sucesso!");
            await CarregaAlunos();
        }
        else
        {
            ToastService.ShowError($"Não foi possível excluir o aluno com id={id}");
        }
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleExportExcel()
    {

        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Alunos");
            var lista = FilteredItems.ToList();

            for (int i = 0; i < columnHeaders.Length; i++)
            {
                worksheet.Cell(1, i + 1).Value = columnHeaders[i];
            }

            for (int i = 0; i < lista.Count; i++)
            {
                worksheet.Cell(i + 2, 1).Value = lista[i].Nome;
                worksheet.Cell(i + 2, 2).Value = lista[i].Email;
                worksheet.Cell(i + 2, 3).Value = lista[i].Idade;
                worksheet.Cell(i + 2, 4).Value = lista[i].Turma.Descricao;
            }
            convertListTo.SavelocalFile(workbook, "Alunos");
        }
        ToastService.ShowInfo($"Lista exportada com sucesso!");
    }

    private void HandleExportPdf()
    {

    }
}
